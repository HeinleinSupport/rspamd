# Please don't modify this file as your changes might be overwritten with
# the next update.
#
# You can modify '$LOCAL_CONFDIR/rspamd.conf.local.override' to redefine
# parameters defined on the top level
#
# You can modify '$LOCAL_CONFDIR/rspamd.conf.local' to add
# parameters defined on the top level
#
# For specific modules or configuration you can also modify
# '$LOCAL_CONFDIR/local.d/file.conf' - to add your options or rewrite defaults
# '$LOCAL_CONFDIR/override.d/file.conf' - to override the defaults
#
# See https://rspamd.com/doc/tutorials/writing_rules.html for details

external-services {

  /* Commented Out

  # multiple scanners could be checked, for each we create a configuration block with an arbitrary name
  clamav {
    # If set force this action if any virus is found (default unset: no action is forced)
    # action = "reject";
    # message = '${SCANNER}: virus found: "${VIRUS}"';
    # Scan mime_parts seperately - otherwise the complete mail will be transfered to AV Scanner
    #scan_mime_parts = true;
    # Scanning Text is suitable for some av scanner databases (e.g. Sanesecurity)
    #scan_text_mime = false;
    #scan_image_mime = false;
    # If `max_size` is set, messages > n bytes in size are not scanned
    #max_size = 20000000;
    # symbol to add (add it to metric if you want non-zero weight)
    symbol = "CLAM_VIRUS";
    # type of scanner: "clamav", "fprot", "sophos" or "savapi"
    type = "clamav";
    # For "savapi" you must also specify the following variable
    #product_id = 12345;
    # You can enable logging for clean messages
    #log_clean = true;
    # servers to query (if port is unspecified, scanner-specific default is used)
    # can be specified multiple times to pool servers
    # can be set to a path to a unix socket
    # Enable this in local.d/external-services.conf
    #servers = "127.0.0.1:3310";
    # if `patterns` is specified virus name will be matched against provided regexes and the related
    # symbol will be yielded if a match is found. If no match is found, default symbol is yielded.
    patterns {
      # symbol_name = "pattern";
      CLAM_JUST_EICAR = "^Eicar-Test-Signature$";
      CLAM_DOC_MALWARE = "^Doc\.Malware\..*";
      CLAM_HTML_PHISH = "^Html\.Phishing\..*";
      CLAM_BROKEN_EXEC = "^Broken\.Executable.*";
      # Heuristics
      CLAM_HEUR_PHISHING =  "^Heuristics\.Phishing\.Email\.SpoofedDomain";
      CLAM_HEUR_OLE2_VBA_MACRO = "^Heuristics\.OLE2\.ContainsMacros$";
      CLAM_HEUR_ENCRYPTED = "^Heuristics\.Encrypted\..*";

      CLAM_PUA_WIN = "^PUA\.Win\..*";
      # ERROR not virus
      CLAM_LIMITS_EXCEEDED = "^Heuristics\.Limits\.Exceeded";
      # Extra Signatures
      CLAM_G_SAFEBROWSING = "^Heuristics.Safebrowsing.*$";
      CLAM_PORCUPINE_JUNK = "^Porcupine\.Junk.*$";
      CLAM_SANESEC_JURBL = "^Sanesecurity\.Jurlbl.*$";
      CLAM_SANESEC_JUNK = "^Sanesecurity\.Junk.*$";
      CLAM_SANESEC_BLURL = "^Sanesecurity\.Blurl.*$";
      CLAM_SANESEC_SCAM = "^Sanesecurity\.Scam.*$";
      CLAM_WINNOW_SPAM = "^winnow\.spam.*$";
      CLAM_SECI_JS_PUA = "^PUA\.SecuriteInfo\.com\.JS\.Malware.*";
      CLAM_SECI_JS_AD = "^SecuriteInfo\.com\.JS\.AdInject.*";
      CLAM_SECI_JS_REDIR = "^SecuriteInfo\.com\.JS\.Redir.*";
      CLAM_SECI_SUSPICIOUS = "^SecuriteInfo\.com\.Suspicious.*"
      CLAM_SECI_HTML = "^SecuriteInfo\.com\.HTML.*";
      CLAM_SECI_PHIS = "^SecuriteInfo\.com\.Phish.*";
      CLAM_SECI_JPG = "^SecuriteInfo\.com\.JPG.*";
    }
    # `whitelist` points to a map of IP addresses. Mail from these addresses is not scanned.
    whitelist = "/etc/rspamd/antivirus.wl";
  }

  dcc {

    symbol = "DCC_BULK_V";
    message = '${SCANNER}: bulk messages found: "${VIRUS}"';
    type = "dcc";
    log_clean = true;
    #servers = "127.0.0.1:10045";

    # if `patterns` is specified virus name will be matched against provided regexes and the related
    # symbol will be yielded if a match is found. If no match is found, default symbol is yielded.
    patterns {
      # symbol_name = "pattern";
    }
    # `whitelist` points to a map of IP addresses. Mail from these addresses is not scanned.
    whitelist = "/etc/rspamd/antivirus.wl";
  }

  pyzor {

    symbol = "PYZOR_V"
    message = '${SCANNER}: bulk messages found: "${VIRUS}"';
    type = "pyzor";
    log_clean = true;
    servers = "127.0.0.1:5953";

    # if `patterns` is specified virus name will be matched against provided regexes and the related
    # symbol will be yielded if a match is found. If no match is found, default symbol is yielded.
    patterns {
      # symbol_name = "pattern";
    }
    # `whitelist` points to a map of IP addresses. Mail from these addresses is not scanned.
    whitelist = "/etc/rspamd/antivirus.wl";
  }

  razor {

    symbol = "RAZOR_V"
    type = "razor";
    log_clean = true;
    servers = "127.0.0.1:9192";

    # if `patterns` is specified virus name will be matched against provided regexes and the related
    # symbol will be yielded if a match is found. If no match is found, default symbol is yielded.
    patterns {
      # symbol_name = "pattern";
    }
    # `whitelist` points to a map of IP addresses. Mail from these addresses is not scanned.
    whitelist = "/etc/rspamd/antivirus.wl";
  }

  spamassassin {

    symbol = "SPAMD_V"
    type = "spamassassin";
    log_clean = true;
    servers = "10.0.4.30:783";

    # if `patterns` is specified virus name will be matched against provided regexes and the related
    # symbol will be yielded if a match is found. If no match is found, default symbol is yielded.
    patterns {
      # symbol_name = "pattern";
      SPAMD_NIXSPAM_IXHASH = "^NIXSPAM_IXHASH$";
      SPAMD_GENERIC_IXHASH = "^GENERIC_IXHASH$";
      SPAMD_OLEMACRO = "^OLEMACRO$";
      SPAMD_OLEMACRO_MALICE = "^OLEMACRO_MALICE$";
      SPAMD_OLEMACRO_RENAME = "^OLEMACRO_RENAME$";
      SPAMD_OLEMACRO_ZIP_PW = "^OLEMACRO_ZIP_PW$";
      SPAMD_OLEMACRO_ENCRYPTED = "^OLEMACRO_ENCRYPTED$";
    }
    # `whitelist` points to a map of IP addresses. Mail from these addresses is not scanned.
    whitelist = "/etc/rspamd/antivirus.wl";
  }

  Symantec {
    symbol = "SYMANTEC_ICAP"
    type = "icap";
    log_clean = true;
    #servers = "127.0.0.1:1344";
    scheme = "avscan";

    mime_parts_filter_regex {
      # symbol_name = "pattern";
      DOC1 = "^invoice.*\.doc$";
      #GEN1 = "application\/octet-stream";
      DOC2 = "application\/msword";
      DOC3 = "application\/vnd\.ms-word.*";
      XLS = "application\/vnd\.ms-excel.*";
      PPT = "application\/vnd\.ms-powerpoint.*";
      GEN2 = "application\/vnd\.openxmlformats-officedocument.*";
    }

    mime_parts_filter_ext {
      # symbol_name = "pattern";
      doc = "doc";
      dot = "dot";
      docx = "docx";
      dotx = "dotx";
      docm = "docm";
      dotm = "dotm";
      xls = "xls";
      xlt = "xlt";
      xla = "xla";
      xlsx = "xlsx";
      xltx = "xltx";
      xlsm = "xlsm";
      xltm = "xltm";
      xlam = "xlam";
      xlsb = "xlsb";
      ppt = "ppt";
      pot = "pot";
      pps = "pps";
      ppa = "ppa";
      pptx = "pptx";
      potx = "potx";
      ppsx = "ppsx";
      ppam = "ppam";
      pptm = "pptm";
      potm = "potm";
      ppsm = "ppsm";
    }

    # X-Infection-Found: Type=2; Resolution=2; Threat=Container size violation
    # X-Infection-Found: Type=2; Resolution=2; Threat=Encrypted container violation;

    # if `patterns` is specified virus name will be matched against provided regexes and the related
    # symbol will be yielded if a match is found. If no match is found, default symbol is yielded.
    patterns {
      # symbol_name = "pattern";
      SYMANTEC_ICAP_SIZE_LIMIT = "^Container size violation$";
      SYMANTEC_ICAP_ENCR_FILE = "^Encrypted container violation$";
    }

    # `whitelist` points to a map of IP addresses. Mail from these addresses is not scanned.
    whitelist = "/etc/rspamd/antivirus.wl";
  }
  Sophos {
    symbol = "SOPHOS_ICAP"
    type = "icap";
    log_clean = true;
    #servers = "127.0.0.1:4020";
    scheme = "sophos";

    mime_parts_filter_regex {
      # symbol_name = "pattern";
      DOC1 = "^invoice.*\.doc$";
      #GEN1 = "application\/octet-stream";
      DOC2 = "application\/msword";
      DOC3 = "application\/vnd\.ms-word.*";
      XLS = "application\/vnd\.ms-excel.*";
      PPT = "application\/vnd\.ms-powerpoint.*";
      GEN2 = "application\/vnd\.openxmlformats-officedocument.*";
    }

    mime_parts_filter_ext {
      # symbol_name = "pattern";
      doc = "doc";
      dot = "dot";
      docx = "docx";
      dotx = "dotx";
      docm = "docm";
      dotm = "dotm";
      xls = "xls";
      xlt = "xlt";
      xla = "xla";
      xlsx = "xlsx";
      xltx = "xltx";
      xlsm = "xlsm";
      xltm = "xltm";
      xlam = "xlam";
      xlsb = "xlsb";
      ppt = "ppt";
      pot = "pot";
      pps = "pps";
      ppa = "ppa";
      pptx = "pptx";
      potx = "potx";
      ppsx = "ppsx";
      ppam = "ppam";
      pptm = "pptm";
      potm = "potm";
      ppsm = "ppsm";
    }

    # `whitelist` points to a map of IP addresses. Mail from these addresses is not scanned.
    whitelist = "/etc/rspamd/antivirus.wl";
  }
  oletools {
    symbol = "OLETOOLS_V"
    type = "oletools";
    log_clean = true;
    #servers = "127.0.0.1:5954";

    # Lua patterns! (possible flags A,W,X)
    oletools_flags = "A.X";

    mime_parts_filter_regex {
      # symbol_name = "pattern";
      DOC1 = "^invoice.*\.doc";
      #GEN1 = "application\/octet-stream";
      DOC2 = "application\/msword";
      DOC3 = "application\/vnd\.ms-word.*";
      XLS = "application\/vnd\.ms-excel.*";
      PPT = "application\/vnd\.ms-powerpoint.*";
      GEN2 = "application\/vnd\.openxmlformats-officedocument.*";
    }

    mime_parts_filter_ext {
      # symbol_name = "pattern";
      doc = "doc";
      dot = "dot";
      docx = "docx";
      dotx = "dotx";
      docm = "docm";
      dotm = "dotm";
      xls = "xls";
      xlt = "xlt";
      xla = "xla";
      xlsx = "xlsx";
      xltx = "xltx";
      xlsm = "xlsm";
      xltm = "xltm";
      xlam = "xlam";
      xlsb = "xlsb";
      ppt = "ppt";
      pot = "pot";
      pps = "pps";
      ppa = "ppa";
      pptx = "pptx";
      potx = "potx";
      ppsx = "ppsx";
      ppam = "ppam";
      pptm = "pptm";
      potm = "potm";
      ppsm = "ppsm";
    }

    # if `patterns` is specified virus name will be matched against provided regexes and the related
    # symbol will be yielded if a match is found. If no match is found, default symbol is yielded.
    patterns {
      # symbol_name = "pattern";
    }
    # `whitelist` points to a map of IP addresses. Mail from these addresses is not scanned.
    whitelist = "/etc/rspamd/antivirus.wl";
  }
  */
  .include(try=true,priority=5) "${DBDIR}/dynamic/external-services.conf"
  .include(try=true,priority=1,duplicate=merge) "$LOCAL_CONFDIR/local.d/external-services.conf"
  .include(try=true,priority=10) "$LOCAL_CONFDIR/override.d/external-services.conf"
}
